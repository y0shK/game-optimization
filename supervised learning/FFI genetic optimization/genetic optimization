ff_party = []
genClasses(ff_party, ff_classes, 4)

"""
genetic algorithms randomize, optimize, regenerate, and repeat.
I randomize the party, set booleans to check for "good" party configs
(i.e. magic) and use those to create the next, extra-fit generation
"""
for member in ff_party:
    if member[5]:
        keepHealer = True
    if member[6]:
        keepNuker = True
ff_party = [] # reset party with booleans on for next generation

# the next generation is more fit; I already checked for magic
# keep those changes by adding them to the party array
if keepHealer:
    ff_party.append(mageWhite)
if not keepHealer and keepNuker:
    ff_party.append(mageBlack)
elif keepHealer and keepNuker:
    ff_party.append(mageRed)

# though some of the party is configured, I need four members
# the other members are randomized genetically; repeat process
genClasses(ff_party, ff_classes, (4-len(ff_party)))

# check for adding damage dealers to party by assessing stats
partyMemCheck = np.array(ff_party[2][0]) + \
    np.array(ff_party[2][1]) + np.array(ff_party[2][2])
if partyMemCheck >= 10:
    keepDPS = True
    mem = ff_party[2]
ff_party = [] # reset party for third generation

# keep the changes of the third generation and regenerate
if keepDPS:
    ff_party.append(mem)
if keepHealer:
    ff_party.append(mageWhite)
if not keepHealer and keepNuker:
    ff_party.append(mageBlack)
elif keepHealer and keepNuker:
    ff_party.append(mageRed)
    
